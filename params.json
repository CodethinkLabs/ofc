{
  "name": "Open Fortran Compiler",
  "tagline": "A open source frontend compiler which parses and analyses Fortran",
  "body": "# OFC - Open Fortran Compiler\r\n\r\n[![Build Status](https://travis-ci.org/CodethinkLabs/ofc.svg?branch=master)](https://travis-ci.org/CodethinkLabs/ofc)\r\n\r\n## Overview\r\n\r\nCurrently OFC is a FORTRAN front-end capable of parsing and performing semantic\r\nanalysis on Fortran. We're targeting legacy FORTRAN first, and can currently\r\nparse and semantically analyse most F77 and earlier, providing syntax and\r\nsemantic warnings and errors.\r\n\r\n### Goals\r\n\r\n1. Produce a FORTRAN static code analysis tool.\r\n2. Produce a FORTRAN modernizer which can reprint legacy FORTRAN as F90 where possible.\r\n3. Produce an alternative FORTRAN front-end for open-source compilers.\r\n\r\n### Features\r\n\r\n- Parse, semantically analyse and re-print ALL NIST F77 tests.\r\n- Safe translation from F77 to F90 syntax where possible.\r\n\r\n\r\n## Usage\r\n### Cloning\r\nIt's recommended that you clone ofc recursively, as it has a submodule:\r\n\r\n    git clone https://github.com/CodethinkLabs/ofc.git --recursive\r\n\r\n### Installation\r\nTo install ofc, do:\r\n\r\n    make install\r\n\r\nNote that the ofc binary can be invoked locally without an install,\r\nand the tests will run using the locally built binary.\r\n\r\n### Execution\r\nTo invoke ofc currently, simply run it over a fortran file:\r\n\r\n    ofc tests/programs/nist/FM001.FOR\r\n\r\nThe compiler options will be automatically detected from the file name, but\r\nthis can be overridden using commandline flags which are printed by invoking\r\nofc with no source file.\r\n\r\nTo print the parse and semantic trees, use the --parse-tree and --sema-tree flags.\r\n\r\n\r\n## Testing\r\n\r\n### Dependencies\r\n\r\nTest Suite:\r\n    gfortran\r\n    valgrind\r\n\r\nStatic Code Analysis:\r\n\tcppcheck\r\n\tclang, scanbuild\r\n\r\n### Test Suite\r\nWe run a test suite including the NIST F77 tests using:\r\n\r\n    make test\r\n\r\nTo make a html report (tests/out/report.html) use:\r\n\r\n    make test-report\r\n\r\nThe full report takes a long time to build as it runs valgrind over both the debug and optimized binaries.\r\nTo make a quick report which does every step except valgrind, use:\r\n\r\n    make test-report-lite\r\n\r\nNote: Tests run from the build directory will use the built ofc rather than the installed one.\r\n\r\n### CPPCheck\r\nWe run cppcheck over the tree using:\r\n\r\n    make cppcheck\r\n\r\n### scanbuild\r\nWe run scanbuild over the tree using:\r\n\r\n    make scan-build\r\n\r\n### Other\r\nWe also have a rule to compile all files at once to produce more warnings using:\r\n\r\n    make scan\r\n\r\n\r\n## Contact\r\n\r\nYou can contact us at #open-fortran-compiler on irc.freenode.net or via the e-mails used in our git commits.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}